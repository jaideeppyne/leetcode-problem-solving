Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3341/

Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:

Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.

Example 2:

Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note: The length of the given binary array will not exceed 50,000. 

SOLUTION:

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        
        unordered_map<int, int>mm;
        mm[0] = 0;
        
        int ans = 0, prefix = 0;
        for (int i = 0; i < nums.size(); i++) {
            
            prefix += (nums[i]) ? 1 : -1;
            if(mm.find(prefix) != mm.end()) {
                ans = max(ans, i + 1 - mm[prefix]);
            }
            else {
                mm[prefix] = i + 1;
            }
        }
        for (auto [i, j] : mm)
            cout << i << " " << j << "\n";
        return ans;
    }
};

Problem statement: https://leetcode.com/explore/challenge/card/june-leetcoding-challenge/539/week-1-june-1st-june-7th/3351/

Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly 
picks an index in proportion to its weight.

Note:

1 <= w.length <= 10000
1 <= w[i] <= 10^5
pickIndex will be called at most 10000 times.
Example 1:

Input: 
["Solution","pickIndex"]
[[[1]],[]]
Output: [null,0]
Example 2:

Input: 
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output: [null,0,1,1,1,0]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, 
the array w. pickIndex has no arguments.  Arguments are always wrapped with a list, even if there aren't any.

SOLUTION:

class Solution {
    private:
    vector<int> weights;  // not important but it is a design choice
    vector<double> probabilities; 
public:
    Solution(vector<int>& w) {
        weights = w;
        double sum = accumulate(weights.begin(), weights.end(), 0.0);
        for(int i = 0; i < weights.size(); ++i){
            double prob = double(weights[i])/sum; //normalized probability
            if(i != 0)
                prob += probabilities[i-1];
            probabilities.push_back(prob); 
        }
    }
    
    int pickIndex() {
        random_device rd;
        std::mt19937 mt(rd());
        std::uniform_real_distribution<double> dist(0.0, 1.0);
        double prob = dist(mt);
        auto it = upper_bound(probabilities.begin(), probabilities.end(), prob);
        return it - probabilities.begin();
    }
}

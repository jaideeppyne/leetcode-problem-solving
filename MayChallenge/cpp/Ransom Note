Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3318/

Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Example 1:

Input: ransomNote = "a", magazine = "b"
Output: false

Example 2:

Input: ransomNote = "aa", magazine = "ab"
Output: false

Example 3:

Input: ransomNote = "aa", magazine = "aab"
Output: true

Constraints:

    You may assume that both strings contain only lowercase letters.

SOLUTION:

CPP solution

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        
        map<char, int>ransom, mag;
        for (char i: ransomNote)
            ransom[i] ++;
        for (char i: magazine)
            mag[i] ++;
        
        for (auto i: ransom) {
            if (i.second > mag[i.first]) {
                return false;
            }
        }
        return true;
    }
};




Python solution:

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
    
        ransom, mag = dict(), dict()
        for i in ransomNote:
            ransom[i] = ransom.get(i, 0) + 1
        for i in magazine:
            mag[i] = mag.get(i, 0) + 1
            
        for key, val in ransom.items():
            if val > mag.get(key, 0):
                return False
        return True
        

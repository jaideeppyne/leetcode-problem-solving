Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/

Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:

    The length of num is less than 10002 and will be â‰¥ k.
    The given num does not contain any leading zero.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

SOLUTION:

CPP SOLUTION

class Solution {
public:
    string removeKdigits(string num, int k) {
        
        int n = num.size();
        while(k --) {
            n = num.size();
            string tmp = num;
            num = "";
            for (int i = 0; i + 1 < n; i ++) {
                if (tmp[i] > tmp[i + 1])
                    continue;
                num += tmp[i];
            }
            if(tmp == num) {
                k ++;
                break;
            }
        }
        while(k --) {
            num.pop_back();
        }
        
        int pos = -1;
        for (int i = 0; i < n and num[i] == '0';i ++) {
            pos = i;
        }
        if(pos == -1)
            return num;
        
        string tmp = "";
        for(int i = pos + 1;i < num.size(); i++) {
            tmp.push_back(num[i]);    
        }
        return tmp;
    }
};




JAVA solution

class Solution {
    public String removeKdigits(String num, int k) {
        
        if (num.length() == k)
            return "0";

        StringBuilder sb = new StringBuilder(num);

        /*We will iterate the number k times. In each iteration:
        1. Remove the digit for which the next digit is smaller.
        2. If we reach at the end than remove last digit.*/
        for (int j = 0; j < k; j++) {
            int i = 0;
            while (i < sb.length() - 1 && sb.charAt(i) <= sb.charAt(i + 1)) {
                i++;
            }
            sb.delete(i, i + 1);
        }

        //remove leading 0's
        while (sb.length() > 1 && sb.charAt(0) == '0')
            sb.delete(0, 1);

        if (sb.length() == 0) {
            return "0";
        }

        return sb.toString();
    }
};

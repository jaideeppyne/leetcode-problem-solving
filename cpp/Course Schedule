Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/538/week-5-may-29th-may-31st/3344/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.

Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.

Constraints:

    The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
    You may assume that there are no duplicate edges in the input prerequisites.
    1 <= numCourses <= 10^5



SOLUTION:

class Solution {
public:
    vector<vector<int>> adj;
    vector<bool> visited, present_in_current_dfs;
    
    //DFS for cycle detection in "directed" graph
    bool isCyclePresent(int node, int parent) {
        
        visited[node] = present_in_current_dfs[node] = true;
        
        for (int child : adj[node]) {
            if(!visited[child] and isCyclePresent(child, node))
                return true;
            else if(present_in_current_dfs[child])
                return true;
        }
        present_in_current_dfs[node] = false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        visited.assign(numCourses + 1, false);
        present_in_current_dfs.assign(numCourses + 1, false);
        adj.resize(numCourses + 1);
        
        for (int i = 0; i < prerequisites.size(); i++)
            adj[prerequisites[i][1] + 1].emplace_back(prerequisites[i][0] + 1);
        
        bool ans = true;
        for (int i = 1; i <= numCourses; i++)
            if (!visited[i] and isCyclePresent(i, 0))
                ans = false;
        
        adj.clear();
        visited.clear();
        present_in_current_dfs.clear();
        
        return ans;
    }
};

Problem statement - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3338/

Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

 

Example 1:

Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Note:

    0 <= A.length < 1000
    0 <= B.length < 1000
    0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9


SOLUTION:

class Solution {
public:
    int search_nearest_index(vector<vector<int>>& A, int m, int start) {
        
        //search the interval which is closest to left of start
        /*
        if there are no element in the left found by binary search
        then first interval in A(A is non-empty), is present right 
        of start.
        */
        int low = 0, high = m - 1, ans = 0;
        while (low <= high) {
            
            int mid = (low + high) / 2;
            if (A[mid][0] <= start) {
                low = mid + 1;
                ans = mid;
            }
            else if (A[mid][0] > start) {
                high = mid - 1;
            }
        }
        
        return ans;
    }
    void search_and_append_intersection(vector<vector<int>>& ans, int idx, vector<vector<int>>& A, int m, vector<int>& cur) {
        
        for (int i = idx;i < m; i++) {
            
            if(A[i][1] < cur[0])
                continue;
            if(A[i][0] > cur[1])
                break;
            ans.push_back({max(A[i][0], cur[0]), min(A[i][1], cur[1])});
        }
    }
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        
        if(!A.size() or !B.size())
            return vector<vector<int>>(0, vector<int>(0));
        
        sort(A.begin(), A.end(), 
             [](auto &x, auto &y){
                if(x[0] == y[0])
                    return x[1] < y[1];
                return x[0] < y[0];
             });
        
        int n = B.size();
        vector<vector<int>> intersection;
        for (int i = 0; i < n; i++) {
            
            int nearest_idx = search_nearest_index(A, A.size(), B[i][0]);
            search_and_append_intersection(intersection, nearest_idx, A, A.size(), B[i]);
        }
        return intersection;
    }
};

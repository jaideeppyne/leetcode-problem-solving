Problem statement: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3337/

Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

SOLUTION:

class Solution {
public:
    string frequencySort(string s) {
        
        int n = s.length();
        unordered_map<char, int>mm;
        
        for (char i: s)
            mm[i] ++;
        
        string ans = "";
        vector<pair<int, char> >v;
        for (auto i: mm)
            v.push_back({i.second, i.first});
        
        sort(v.begin(), v.end(), [](pair<int, char>p1, pair<int, char>p2){return p1.first > p2.first;});
        for (auto i: v) {
            
            char ch = i.second;
            int freq = i.first;
            while (freq --) 
                ans += ch;
        }
         return ans;
    }
};
